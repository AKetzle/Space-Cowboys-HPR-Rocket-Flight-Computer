/*This is a lookup table for the tangent function in 0.1 degree steps, which is the precision that the
 * off-vertical output variables move.  The position of the value represents the degrees of rotation.
 * For example Tan[0] = tan(0) = 0, Tan[455] = tan(45.5) = 1.0176073929.  In this way, the table is used
 * to compute arcTan with the binary algorithm.  Each arcTan evaluation takes approx 38 microseconds
 */
const float Tan[901] =
{0,0.0017453310241888,0.00349067268159625,0.00523603560570013,0.00698143043049648,0.00872686779075879,0.0104723583222972,0.0122179126622177,
0.0139635414491817,0.0157092553236649,0.0174550649282176,0.0192009809077235,0.02094701390966,0.0226931745843578,0.0244394735852609,
0.0261859215691869,0.0279325291965875,0.0296793071318085,0.0314262660433512,0.0331734166041327,0.0349207694917477,0.0366683353887297,
0.0384161249828123,0.0401641489671918,0.0419124180407891,0.0436609429085121,0.0454097342815188,0.0471588028774805,0.048908159420845,
0.0506578146431008,0.0524077792830412,0.0541580640870288,0.0559086798092606,0.0576596372120334,0.0594109470660099,0.0611626201504843,
0.0629146672536498,0.0646670991728651,0.0664199267149226,0.0681731606963163,0.0699268119435104,0.0716808912932086,0.0734354095926239,
0.0751903776997486,0.0769458064836253,0.0787017068246184,0.080458089614686,0.0822149657576523,0.0839723461694812,0.0857302417785501,
0.087488663525924,0.0892476223656314,0.0910071292649395,0.0927671952046312,0.094527831179282,0.0962890481975386,0.0980508572823969,
0.099813269471482,0.101576295817328,0.103339947387661,0.105104235265676,0.106869170550327,0.108634764356604,0.110401027815819,
0.112167972075894,0.113935608301645,0.115703947675069,0.11747300139563,0.119242780680552,0.121013296765107,0.122784560902905,
0.124556584366184,0.126329378446108,0.128102954453057,0.12987732371692,0.131652497587396,0.133428487434287,0.135205304647796,
0.136982960638829,0.138761466839291,0.140540834702391,0.142321075702943,0.144102201337667,0.145884223125499,0.147667152607893,
0.149451001349128,0.151235780936619,0.153021502981227,0.154808179117564,0.156595821004313,0.158384440324536,0.160174048785993,
0.161964658121453,0.163756280089017,0.165548926472434,0.16734260908142,0.169137339751982,0.170933130346744,0.172729992755263,
0.174527938894365,0.176326980708465,0.1781271301699,0.179928399279259,0.181730800065716,0.18353434458736,0.185339044931534,0.187144913215174,
0.188951961585141,0.190760202218567,0.192569647323194,0.194380309137718,0.196192199932139,0.198005332008098,0.199819717699237,
0.201635369371542,0.203452299423699,0.205270520287449,0.207090044427939,0.208910884344087,0.210733052568936,0.212556561670022,
0.214381424249731,0.216207652945669,0.218035260431029,0.21986425941496,0.22169466264294,0.223526482897149,0.225359732996845,
0.227194425798743,0.229030574197392,0.230868191125563,0.232707289554628,0.234547882494949,0.236389982996269,0.2382336041481,
0.240078759080116,0.241925460962554,0.243773723006607,0.245623558464826,0.247474980631524,0.249328002843181,0.25118263847885,
0.253038900960571,0.254896803753781,0.256756360367727,0.25861758435589,0.260480489316402,0.262345088892468,0.264211396772794,
0.266079426692015,0.267949192431123,0.269820707817906,0.271693986727382,0.273569043082237,0.275445890853271,0.277324544059838,
0.2792050167703,0.281087323102473,0.282971477224082,0.284857493353221,0.286745385758808,0.288635168761052,0.290526856731916,
0.29242046409559,0.294316005328959,0.29621349496208,0.298112947578663,0.300014377816549,0.301917800368199,0.303823229981181,
0.30573068145866,0.307640169659898,0.309551709500749,0.311465315954161,0.313381004050685,0.315298788878983,0.31721868558634,
0.31914070937918,0.32106487552359,0.322991199345838,0.324919696232906,0.326850381633021,0.328783271056188,0.330718380074728,
0.332655724323825,0.334595319502073,0.336537181372023,0.338481325760742,0.340427768560369,0.342376525728683,0.344327613289665,
0.346281047334074,0.348236844020021,0.350195019573549,0.352155590289219,0.354118572530698,0.356083982731354,0.358051837394851,
0.360022153095757,0.361994946480143,0.363970234266202,0.365948033244865,0.367928360280416,0.369911232311126,0.371896666349877,
0.373884679484805,0.375875288879932,0.377868511775821,0.379864365490219,0.381862867418719,0.383864035035416,0.385867885893577,
0.387874437626312,0.389883707947249,0.391895714651219,0.393910475614942,0.395928008797721,0.397948332242141,0.399971464074773,
0.401997422506884,0.404026225835157,0.406057892442405,0.408092440798307,0.410129889460137,0.412170257073502,0.414213562373095,
0.416259824183439,0.418309061419649,0.420361293088197,0.422416538287682,0.424474816209605,0.426536146139155,0.428600547456001,
0.430668039635085,0.432738642247426,0.434812374960934,0.436889257541223,0.438969309852437,0.441052551858084,0.443139003621867,
0.445228685308536,0.447321617184738,0.449417819619878,0.451517313086983,0.453620118163582,0.455726255532585,0.457835745983172,
0.459948610411694,0.462064869822579,0.464184545329239,0.466307658154999,0.468434229634023,0.470564281212251,0.47269783444835,
0.474834911014658,0.47697553269816,0.479119721401448,0.481267499143708,0.483418888061704,0.485573910410779,0.487732588565861,
0.489894945022477,0.492061002397777,0.49423078343157,0.496404310987367,0.498581608053431,0.500762697743844,0.502947603299571,
0.505136348089552,0.507328955611784,0.509525449494429,0.51172585349692,0.513930191511088,0.516138487562292,0.518350765810561,
0.520567050551746,0.522787366218689,0.52501173738239,0.527240188753201,0.529472745182015,0.531709431661479,0.533950273327211,
0.536195295459033,0.538444523482208,0.5406979829687,0.542955699638437,0.545217699360588,0.547484008154853,0.54975465219277,
0.552029657799022,0.554309051452769,0.556592859788987,0.558881109599822,0.561173827835951,0.563471041607968,0.56577277818777,
0.568079065009966,0.570389929673295,0.57270539994206,0.575025503747575,0.577350269189626,0.579679724537944,0.5820138982337,
0.584352818891006,0.586696515298434,0.589045016420551,0.591398351399471,0.593756549556416,0.596119640393298,0.598487653594314,
0.60086061902756,0.603238566746659,0.6056215269924,0.608009530194405,0.610402606972805,0.612800788139932,0.615204104702031,
0.617612587860989,0.620026269016084,0.622445179765743,0.624869351909327,0.627298817448933,0.629733608591207,0.632173757749186,
0.634619297544148,0.637070260807493,0.639526680582632,0.641988590126903,0.644456022913503,0.64692901263344,0.649407593197511,
0.651891798738289,0.654381663612146,0.656877222401279,0.659378509915777,0.661885561195691,0.66439841151314,0.66691709637443,
0.669441651522199,0.671972112937588,0.674508516842427,0.677050899701448,0.679599298224527,0.682153749368939,0.684714290341649
,0.687280958601613,0.689853791862121,0.69243282809315,0.695018105523749,0.697609662644451,0.70020753820971,0.702811771240357,
0.705422401026098,0.708039467128023,0.710663009381151,0.713293067897005,0.715929683066206,0.718572895561102,0.721222746338428,
0.723879276641984,0.726542528005361,0.729212542254674,0.731889361511348,0.734573028194916,0.737263585025863,0.739961075028488,
0.742665541533811,0.745377028182503,0.748095578927852,0.750821238038765,0.753554050102794,0.756294060029212,0.759041313052109,
0.761795854733529,0.764557730966644,0.76732698797896,0.770103672335565,0.772887830942407,0.775679511049613,0.77847876025485,
0.781285626506717,0.78410015810818,0.786922403720045,0.789752412364476,0.792590233428544,0.795435916667829,0.798289512210049,
0.801151070558751,0.804020642597024,0.806898279591268,0.809784033195007,0.812677955452741,0.815580098803846,0.818490516086521,
0.821409260541782,0.824336385817496,0.827271945972476,0.830215995480612,0.833168589235058,0.836129782552468,0.83909963117728,
0.842078191286052,0.845065519491856,0.848061672848713,0.851066708856094,0.854080685463467,0.857103661074899,0.860135694553722,
0.863176845227244,0.86622717289153,0.869286737816226,0.872355600749459,0.875433822922782,0.878521466056188,0.881618592363189,
0.884725264555944,0.887841545850464,0.890967499971876,0.894103191159751,0.8972486841735,0.90040404429784,0.903569337348318,
0.906744629676921,0.909929988177738,0.913125480292705,0.916331174017423,0.91954713790704,0.922773441082214,0.926010153235153,
0.929257344635727,0.932515086137662,0.935783449184807,0.939062505817492,0.942352328678954,0.945652991021854,0.94896456671488,
0.952287130249425,0.955620756746361,0.958965521962899,0.962321502299531,0.965688774807074,0.969067417193793,0.97245750783263,
0.975859125768514,0.979272350725784,0.98269726311569,0.986133944044009,0.989582475318754,0.993042939457986,0.99651541969773,1,
1.00349676506092,1.00700580031898,1.01052719196335,1.01406102694237,1.01760739297213,1.0211663785451,1.02473807293904,
1.0283225662258,1.0319199492805,1.03553031379057,1.03915375226516,1.04279035804448,1.0464402253094,1.05010344909111,1.05378012528096,
1.05747035064038,1.06117422281097,1.06489184032479,1.06862330261465,1.07236871002468,1.07612816382097,1.0799017662024,1.08368962031159,
1.087491830246,1.09130850106927,1.09513973882258,1.0989856505363,1.10284634424171,1.10672192898298,1.11061251482919,1.11451821288671,
1.11843913531154,1.12237539532201,1.12632710721157,1.13029438636175,1.13427734925541,1.13827611349003,1.14229079779135,1.14632152202712,
1.15036840722101,1.15443157556686,1.15851115044303,1.16260725642696,1.16672001931003,1.17084956611254,1.174996025099,1.17915952579358,
1.18334019899582,1.18753817679658,1.19175359259421,1.19598658111099,1.20023727840978,1.20450582191096,1.20879235040961,1.21309700409293,
1.21741992455798,1.22176125482961,1.22612113937874,1.23049972414091,1.23489715653505,1.23931358548261,1.24374916142694,1.24820403635305,
1.25267836380754,1.25717229891895,1.26168599841844,1.26621962066068,1.27077332564515,1.27534727503783,1.27994163219308,1.28455656217599,
1.28919223178507,1.29384880957521,1.29852646588115,1.30322537284121,1.30794570442141,1.31268763644007,1.31745134659271,1.32223701447738,
1.32704482162041,1.3318749515026,1.33672758958577,1.34160292333983,1.34650114227021,1.35142243794581,1.35636700402736,1.36133503629629,
1.36632673268403,1.37134229330185,1.37638192047117,1.38144581875436,1.38653419498608,1.39164725830515,1.39678522018694,1.40194829447634,
1.40713669742119,1.41235064770646,1.41759036648881,1.42285607743187,1.42814800674211,1.43346638320528,1.4388114382235,1.44418340585301,
1.44958252284256,1.45500902867244,1.46046316559427,1.46594517867138,1.47145531581997,1.47699382785099,1.48256096851274,1.4881569945342,
1.4937821656692,1.49943674474131,1.50512099768954,1.5108351936149,1.51657960482778,1.52235450689613,1.52816017869459,1.53399690245446,
1.53986496381458,1.5457646518732,1.55169625924067,1.55766008209325,1.56365642022779,1.56968557711749,1.57574785996865,1.5818435797785,
1.5879730513941,1.59413659357234,1.60033452904105,1.6065671845613,1.61283489099082,1.61913798334868,1.62547680088113,1.63185168712879,
1.63826298999498,1.64471106181553,1.65119625942978,1.65771894425306,1.66427948235052,1.67087824451238,1.6775156063307,1.68419194827759,
1.69090765578501,1.69766311932609,1.70445873449808,1.71129490210694,1.71817202825363,1.72509052442206,1.73205080756888,1.73905330021498,
1.74609843053893,1.75318663247224,1.76031834579656,1.76749401624289,1.77471409559277,1.78197904178156,1.78928931900388,1.79664539782115,
1.80404775527142,1.81149687498144,1.81899324728107,1.82653736932012,1.83412974518759,1.84177088603346,1.84946131019299,1.85720154331376,
1.86499211848531,1.87283357637161,1.88072646534633,1.88867134163107,1.8966687694365,1.90471932110663,1.91282357726619,1.92098212697117,
1.92919556786276,1.9374645063246,1.9457895576435,1.95417134617377,1.96261050550515,1.97110767863448,1.97966351814128,1.98827868636719,
1.99695385559955,2.00568970825902,2.01448693709159,2.02334624536486,2.03226834706891,2.0412539671217,2.0503038415793,2.05941871785087,
2.06859935491879,2.07784652356381,2.0871610065955,2.09654359908817,2.10599510862235,2.11551635553191,2.1251081731572,2.13477140810414,
2.14450692050956,2.15431558431295,2.16419828753477,2.17415593256149,2.18418943643766,2.19429973116504,2.20448776400914,2.21475449781336,
2.22510091132081,2.23552799950424,2.24603677390422,2.25662826297571,2.26730351244349,2.27806358566652,2.28890956401153,2.29984254723626,
2.31086365388241,2.32197402167879,2.33317480795485,2.34446719006495,2.35585236582375,2.36733155395294,2.37890599453977,2.39057694950767,
2.40234570309941,2.41421356237309,2.42618185771146,2.43825194334488,2.45042519788851,2.46270302489402,2.4750868534163,2.48757813859584,
2.500178362257,2.51288903352289,2.52571168944731,2.53864789566431,2.55169924705603,2.56486736843925,2.57815391527148,2.59156057437701,
2.6050890646938,2.6187411380418,2.63251857991336,2.64642321028663,2.66045688446264,2.67462149392682,2.68891896723594,2.70335127093118,
2.71792041047842,2.73262843123651,2.74747741945462,2.7624695032997,2.77760685391497,2.79289168651081,2.80832626148884,2.8239128856008,
2.8396539131431,2.85555174718862,2.87160884085691,2.88782769862438,2.90421087767582,2.92076098929881,2.93748070032268,2.95437273460356,
2.97143987455744,2.98868496274289,3.00611090349537,3.02372066461515,3.04151727911091,3.05950384700108,3.07768353717525,3.09605958931799,
3.11463531589748,3.13341410422157,3.15239941856395,3.17159480236321,3.19100388049769,3.21063036163928,3.23047804068929,3.25055080129984,
3.27085261848414,3.29138756131959,3.31215979574727,3.33317358747211,3.35443330496784,3.37594342259125,3.39770852381029,3.41973330455117,
3.44202257666922,3.46458127154926,3.48741444384091,3.51052727533486,3.53392507898635,3.55761330309244,3.58159753562985,3.60588350876087,
3.63047710351466,3.65538435465226,3.68061145572354,3.70616476432517,3.73205080756888,3.75827628776987,3.78484808836592,3.811773280078,
3.83905912732417,3.86671309489874,3.89474285492986,3.92315629412897,3.95196152134655,3.98116687544948,4.01078093353584,4.04081251950451,
4.0712707129972,4.10216485873212,4.13350457624956,4.16529977009042,4.19756064043065,4.23029769419537,4.26352175667812,4.29724398369244,
4.33147587428416,4.36622928403498,4.40151643898974,4.43734995024155,4.47374282921156,4.51070850366206,4.54826083448449,4.58641413330635,
4.62518318096396,4.66458324689134,4.70463010947845,4.74534007745592,4.78673001236714,4.82881735219275,4.87162013619715,4.9151570310712,
4.95944735845107,5.00451112389806,5.05036904743101,5.09704259570917,5.14455401597031,5.19292637183719,5.24218358111318,5.29235045569719,
5.34345274375814,5.39551717431914,5.44857150441407,5.502644568991,5.55776633375113,5.61396795112674,5.67128181961771,5.72974164672431,
5.78938251573294,5.85024095663295,5.91235502146579,5.97576436443306,6.04051032711779,6.1066360292039,6.17418646511218,6.24320860700781,
6.31375151467504,6.38586645279926,6.45960701624548,6.5350292639766,6.61219186231521,6.6911562383174,6.77198674410242,6.85475083306119,
6.93951924895825,7.02636622904137,7.1153697223842,7.20661162481199,7.30017803189854,7.39615951167712,7.49465139888137,7.59575411272514,
7.69957350044874,7.80622120910139,7.91581508830583,8.0284796270593,8.14434642797459,8.26355472275948,8.38625193317966,8.51259428225693,
8.64274746103133,8.77688735686997,8.91520085005536,9.05788668623892,9.20515643332558,9.35723553247826,9.51436445422259,9.67679997212194,
9.84481656821161,10.0187079863736,10.1987889521444,10.3853970801381,10.5788949934056,10.7796726827209,10.9881501380931,11.2047802898679,
11.4300523027613,11.6644952732444,11.9086823891011,12.1632356199932,12.4288310198391,12.7062047361747,12.9961598389745,13.2995741023302,
13.6174088977975,13.9507193892097,14.3006662567119,14.6685292244933,15.0557227244777,15.4638141000704,15.8945448438653,16.3498554760997,
16.8319148134253,17.3431545592746,17.88631037992,18.4644709307382,19.0811366877282,19.7402909510663,20.4464860637097,21.2049487896887,
22.0217100104677,22.9037655484311,23.8592771962427,24.8978261886453,26.0307358029319,27.2714861309839,28.6362532829155,30.1446188655592,
31.8205159537739,33.6935089339822,35.8005532890367,38.1884592970256,40.9174116010041,44.0661131955198,47.7395014063953,52.0806725867717,
57.2899616307599,63.6567411628717,71.6150701195219,81.8470411146703,95.4894751711147,114.58865012931,143.237121669474,190.984186377826,
286.477734011608,572.957213354303,573};

void getRotnDCM2D(){

  //Calculate new X angle from gyro data
  dx += gyroX * gdt;
  //Overflow X data and recompute as needed
  while (abs(dx) > oneDeg) {
    if (dx > 0) {counterSign = 1;}
    else {counterSign = -1;}
    dx -= counterSign * oneDeg;
    rollZ += counterSign;
    //cos(A+B) = cosAcosB - sinAsinB A=big B=small cos(1deg)=0.999847695~=1
    cosX = PrevCosX * 0.999847695 - PrevSinX * (counterSign * 0.017452406);
    //sin(A+B) = sinAcosB + cosAsinB A=big B=small
    sinX = PrevSinX * 0.999847695 + PrevCosX * (counterSign * 0.017452406);
    PrevCosX = cosX;
    PrevSinX = sinX;}
      
  //Compute the new y and z angles
  dz += cosX * gyroZ * gdt;
  dz += sinX * gyroY * gdt;
  dy += cosX * gyroY * gdt;
  dy -= sinX * gyroZ * gdt;
  //Overflow Y data and recompute as needed
  while (abs(dy) > oneTenthDeg) {
    if (dy > 0) {counterSign = 1;}
    else {counterSign = -1;}
    dy -= counterSign * oneTenthDeg;
    yawY += counterSign;
    calcOffVert = true;}
    
  //Overflow Z data and recompute as needed
  while (abs(dz) > oneTenthDeg) {
    if (dz > 0) {counterSign = 1;}
    else {counterSign = -1;}
    dz -= counterSign * oneTenthDeg;
    pitchX += counterSign;
    calcOffVert = true;}

  //Check if the max angle is exceeded, shutdown staging if angle > 45 is detected
  if ((!apogee && calcOffVert) || testMode){
    tanYaw = speedTan(yawY);
    tanPitch = speedTan(pitchX);
    //calculate the off-vertical rotation angle
    float hyp1 = tanYaw*tanYaw + tanPitch*tanPitch;
    float hyp2 = pow(hyp1, 0.5);
    offVert = speedArcTan(hyp2);
    calcOffVert = false;
      
    //check to see if the maximum angle has been exceeded
    if (offVert > max_ang) {rotation_OK = false;}
    else if (!rotationFault){rotation_OK = true;}
    if(!rotationFault && offVert > 450){rotationFault = true;}}
}//end void

float speedTan(int rotn){
  rotn = abs(rotn);
  if(rotn > 900){rotn = 1800 - rotn;}
  return Tan[rotn];}

int speedArcTan(float myValue){
  int cycle = 0;
  int posnA = 0;
  int posnB = 900;
  int posnC = 450;
  float Fc=1.0;
  boolean exitFlag = false;
  int degree;

  //if the value is outside the max range, then its at 90 degrees
  if(myValue > 573.0){posnA = 900; exitFlag = true;}

  //use the binary algorithm to speed things up
  while(!exitFlag && cycle < 900){

    if(myValue > Tan[posnC]){posnA = posnC;}
    else{posnB = posnC;}
    if(posnB-posnA <= 1){exitFlag = true;}
    else{posnC = (int)((posnA + posnB)*0.5);cycle++;}}
  
return posnA;}

void getQuatRotn(float dx, float dy, float dz){

//Local Vectors
float NewPoint[4];
float QuatDiff[5];
float Rotn1[4];
float Rotn2[4];
float Rotn3[4];

//Local rotation holders
float quatPitchX;
float quatYawY;
float quatRollZ;

const float pi = 3.14159265359;
const float radDeg = 57.295780;
    
//Compute quaternion derivative
QuatDiff[1] = 0.5 * (-1 * dx * Quat[2] - dy * Quat[3] - dz * Quat[4]);
QuatDiff[2] = 0.5 * (     dx * Quat[1] - dy * Quat[4] + dz * Quat[3]);
QuatDiff[3] = 0.5 * (     dx * Quat[4] + dy * Quat[1] - dz * Quat[2]);
QuatDiff[4] = 0.5 * (-1 * dx * Quat[3] + dy * Quat[2] + dz * Quat[1]);

//Update the quaternion
Quat[1] += QuatDiff[1];
Quat[2] += QuatDiff[2];
Quat[3] += QuatDiff[3];
Quat[4] += QuatDiff[4];

//re-normalize
float quatLen = pow( Quat[1]*Quat[1] + Quat[2]*Quat[2] + Quat[3]*Quat[3] + Quat[4]*Quat[4], -0.5);
Quat[1] *= quatLen;
Quat[2] *= quatLen;
Quat[3] *= quatLen;
Quat[4] *= quatLen;
    
//compute the components of the rotation matrix
float a = Quat[1];
float b = Quat[2];
float c = Quat[3];
float d = Quat[4];
float a2 = a*a;
float b2 = b*b;
float c2 = c*c;
float d2 = d*d;
float ab = a*b;
float ac = a*c;
float ad = a*d;
float bc = b*c;
float bd = b*d;
float cd = c*d;
    
//Compute rotation matrix
Rotn1[1] = a2 + b2 - c2 - d2;
//Rotn1[2] = 2 * (bc - ad);
//Rotn1[3] = 2 * (bd + ac);
Rotn2[1] = 2 * (bc + ad);
//Rotn2[2] = a2 - b2 + c2 - d2;
//Rotn2[3] = 2 * (cd - ab);
Rotn3[1] = 2 * (bd - ac);
Rotn3[2] = 2 * (cd + ab);
Rotn3[3] = a2 - b2 - c2 + d2;

//Compute angle off vertical
quatPitchX = atan2(Rotn3[2], Rotn3[3]);
quatRollZ = atan2(Rotn2[1], Rotn1[1]);
quatYawY = asin(-Rotn3[1]);

float tanYaw;
float tanPitch;

if(quatYawY <= 0.176){tanYaw = quatYawY;}
else{tanYaw = tan(quatYawY);}

if(quatPitchX <= 0.176){tanPitch = quatPitchX;}
else{tanPitch = tan(quatPitchX);}

offVert = atan(pow(tanYaw*tanYaw + tanPitch*tanPitch, 0.5));

rollZ = (int)(quatRollZ*radDeg*10);
yawY = (int)(quatYawY*radDeg*10);
pitchX = (int)(quatPitchX*radDeg*10);

//Check if the max angle is exceeded
if (!sustainerFireCheck && rotation_OK && offVert > max_ang){rotation_OK = false;}
}
